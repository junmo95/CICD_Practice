# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

# main이 push 할때만 깃허브액션동작
on:
  push:
    branches: [ "main" ]

# 접근권한을 읽기만 - 혹시모르니깐 지금은 생략
# permissions:
#   contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    
    - name: checkout
      uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'

    # Gradle Wrapper 스크립트 파일 (gradlew)에 실행 권한을 부여
    # gradlew wrappe 통해 빌드된거 밀고, jar 파일생성
    - name: Build Spring Project
      run: |
        chmod +x ./gradlew
        ./gradlew wrapper 
        ./gradlew clean bootjar

    # Build & Push Docker Image
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push Docker Spring Project Image
      uses: docker/build-push-action@v2
      with:
        context: .
        dockerfile: Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_REPOSITORY }}/test01:latest
        
  deploy: 
    needs: build
    runs-on: ubuntu-latest
    steps:
    # 서버에서 Docker 이미지 실행
    - name: EC2 Docker Run
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        password: ${{ secrets.EC2_PASSWORD }}
        port: 22
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          docker-compose up -d


        
